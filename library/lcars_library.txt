--@name LCARS Library
--@author The17thDoctor for Nowova

--like this entire lib was made by The17thDoctor <3


lcars = {
    cachedCorners = {},
    cornerFunctions = {}
}

-- Crude way of making a unique ID depeneding on params
local function cid(cornerParams)
    local idString = ""
    for k, v in pairs(cornerParams) do
        idString = idString .. tostring(v)
    end

    return idString
end

function lcars.cornerFunctions.TR(cornerParams)
    local x, y = cornerParams.x, cornerParams.y
    local hWidth, hHeight = cornerParams.hWidth, cornerParams.hHeight
    local vWidth, vHeight = cornerParams.vWidth, cornerParams.vHeight

    local outArcWidth, outArcHeight = cornerParams.outArcWidth, cornerParams.outArcHeight
    local inArcWidth, inArcHeight = cornerParams.inArcWidth, cornerParams.inArcHeight

    local outArcSegments, inArcSegments = cornerParams.outArcSegments or 5, cornerParams.inArcSegments or 5

    local poly = {
        { x = x - vWidth / 2 + outArcWidth, y = y - vHeight - outArcHeight },
        { x = x + vWidth / 2 + hWidth, y = y - vHeight - outArcHeight },
        { x = x + vWidth / 2 + hWidth, y = y - vHeight - outArcHeight + hHeight }
    }

    local inArcX, inArcY = x + vWidth / 2 + inArcWidth, y - vHeight - outArcHeight + hHeight + inArcHeight
    for i = 0, inArcSegments do
        local delta = (1 + i / inArcSegments) * math.pi / 2

        local px = math.cos(delta) * inArcWidth + inArcX
        local py = -math.sin(delta) * inArcHeight + inArcY

        poly[#poly + 1] = { x = px, y = py }
    end

    poly[#poly + 1] = { x = x + vWidth / 2, y = y }
    poly[#poly + 1] = { x = x - vWidth / 2, y = y }
    poly[#poly + 1] = { x = x - vWidth / 2, y = y - vHeight }

    local outArcX, outArcY = x - vWidth / 2 + outArcWidth, y - vHeight
    for i = 0, outArcSegments do
        local delta = (2 - i / outArcSegments) * math.pi / 2

        local px = math.cos(delta) * outArcWidth + outArcX
        local py = -math.sin(delta) * outArcHeight + outArcY

        poly[#poly + 1] = { x = px, y = py }
    end

    return poly
end

function lcars.cornerFunctions.TL(cornerParams)
    local x, y = cornerParams.x, cornerParams.y
    local hWidth, hHeight = cornerParams.hWidth, cornerParams.hHeight
    local vWidth, vHeight = cornerParams.vWidth, cornerParams.vHeight

    local outArcWidth, outArcHeight = cornerParams.outArcWidth, cornerParams.outArcHeight
    local inArcWidth, inArcHeight = cornerParams.inArcWidth, cornerParams.inArcHeight

    local outArcSegments, inArcSegments = cornerParams.outArcSegments or 5, cornerParams.inArcSegments or 5

    local poly = {}

    local outArcX, outArcY = x + vWidth / 2 - outArcWidth, y - vHeight
    for i = 0, outArcSegments do
        local delta = (1 - i / outArcSegments) * math.pi / 2

        local px = math.cos(delta) * outArcWidth + outArcX
        local py = -math.sin(delta) * outArcHeight + outArcY

        poly[#poly + 1] = { x = px, y = py }
    end

    poly[#poly + 1] = { x = x + vWidth / 2, y = y }
    poly[#poly + 1] = { x = x - vWidth / 2, y = y }

    local inArcX, inArcY = x - vWidth / 2 - inArcWidth, y - vHeight - outArcHeight + hHeight + inArcHeight
    for i = 0, inArcSegments do
        local delta = (i / inArcSegments) * math.pi / 2

        local px = math.cos(delta) * inArcWidth + inArcX
        local py = -math.sin(delta) * inArcHeight + inArcY

        poly[#poly + 1] = { x = px, y = py }
    end


    poly[#poly + 1] = { x = x - vWidth / 2 - hWidth, y = y - vHeight - outArcHeight + hHeight }
    poly[#poly + 1] = { x = x - vWidth / 2 - hWidth, y = y - vHeight - outArcHeight }

    return poly
end

function lcars.cornerFunctions.BR(cornerParams)
    local x, y = cornerParams.x, cornerParams.y
    local hWidth, hHeight = cornerParams.hWidth, cornerParams.hHeight
    local vWidth, vHeight = cornerParams.vWidth, cornerParams.vHeight

    local outArcWidth, outArcHeight = cornerParams.outArcWidth, cornerParams.outArcHeight
    local inArcWidth, inArcHeight = cornerParams.inArcWidth, cornerParams.inArcHeight

    local outArcSegments, inArcSegments = cornerParams.outArcSegments or 5, cornerParams.inArcSegments or 5

    local poly = {
        { x = x - vWidth / 2 + outArcWidth, y = y + vHeight + outArcHeight }
    }

    local outArcX, outArcY = x - vWidth / 2 + outArcWidth, y + vHeight
    for i = 0, outArcSegments do
        local delta = (-1 - i / outArcSegments) * math.pi / 2

        local px = math.cos(delta) * outArcWidth + outArcX
        local py = -math.sin(delta) * outArcHeight + outArcY

        poly[#poly + 1] = { x = px, y = py }
    end

    poly[#poly + 1] = { x = x - vWidth / 2, y = y }
    poly[#poly + 1] = { x = x + vWidth / 2, y = y }

    local inArcX, inArcY = x + vWidth / 2 + inArcWidth, y + vHeight + outArcHeight - hHeight - inArcHeight
    for i = 0, inArcSegments do
        local delta = (2 + i / inArcSegments) * math.pi / 2

        local px = math.cos(delta) * inArcWidth + inArcX
        local py = -math.sin(delta) * inArcHeight + inArcY

        poly[#poly + 1] = { x = px, y = py }
    end

    poly[#poly + 1] = { x = x + vWidth / 2 + hWidth, y = y + vHeight + outArcHeight - hHeight }
    poly[#poly + 1] = { x = x + vWidth / 2 + hWidth, y = y + vHeight + outArcHeight }

    return poly
end

function lcars.cornerFunctions.BL(cornerParams)
    local x, y = cornerParams.x, cornerParams.y
    local hWidth, hHeight = cornerParams.hWidth, cornerParams.hHeight
    local vWidth, vHeight = cornerParams.vWidth, cornerParams.vHeight

    local outArcWidth, outArcHeight = cornerParams.outArcWidth, cornerParams.outArcHeight
    local inArcWidth, inArcHeight = cornerParams.inArcWidth, cornerParams.inArcHeight

    local outArcSegments, inArcSegments = cornerParams.outArcSegments or 5, cornerParams.inArcSegments or 5

    local poly = {
        { x = x, y = y + vHeight + outArcHeight },
        { x = x - vWidth / 2 - hWidth, y = y + vHeight + outArcHeight },
        { x = x - vWidth / 2 - hWidth, y = y + vHeight + outArcHeight - hHeight }
    }

    local inArcX, inArcY = x - vWidth / 2 - inArcWidth, y + vHeight + outArcHeight - hHeight - inArcHeight
    for i = 0, inArcSegments do
        local delta = (-1 + i / inArcSegments) * math.pi / 2

        local px = math.cos(delta) * inArcWidth + inArcX
        local py = -math.sin(delta) * inArcHeight + inArcY

        poly[#poly + 1] = { x = px, y = py }
    end

    poly[#poly + 1] = { x = x - vWidth / 2, y = y }
    poly[#poly + 1] = { x = x + vWidth / 2, y = y }

    local outArcX, outArcY = x + vWidth / 2 - outArcWidth, y + vHeight
    for i = 0, outArcSegments do
        local delta = (-i / outArcSegments) * math.pi / 2

        local px = math.cos(delta) * outArcWidth + outArcX
        local py = -math.sin(delta) * outArcHeight + outArcY

        poly[#poly + 1] = { x = px, y = py }
    end

    return poly
end

--[[
    Takes in a table with set fields :
    x, y : origin from the center we set on discord
    orientation : can be either "BL", "BR", "TL", "TR" for bottom left, bottom right, top left, top right

    hWidth, hHeight : size of the horizontal rectangle
    vWidth, vHeight : size of the vertical rectangle

    outArcWidth, outArcHeight : size of the outer arc
    outArcSegments : the number of segments for the outer arc (default 5)
    inArcWidth, inArcHeight : size of the inner arc
    inArcSegments : the number of segments for the inner arc (default 5)

    cache : true or false whether you wanna cache it (default true)

    No value checking so it might just break if you dont check your values lmao
]]--
function lcars.drawCorner(cornerParams)
    local cache = cornerParams.cache
    if cache == nil then cache = true end

    local id = cid(cornerParams)
    if cache and lcars.cachedCorners[id] then
        render.drawPoly(lcars.cachedCorners[id])
        return
    end

    local poly = lcars.cornerFunctions[cornerParams.orientation](cornerParams)
    if cache then lcars.cachedCorners[id] = poly end

    render.drawPoly(poly)
end

function lcars.halfCircle(x, y, r, s)
    if s == "l" then
        render.enableScissorRect(x - r, y - r, x, y + r)
    elseif s == "r" then
        render.enableScissorRect(x, y - r, x + r, y + r)
    elseif s == "t" then
        render.enableScissorRect(x - r, y - r, x + r, y)
    elseif s == "b" then
        render.enableScissorRect(x - r, y, x + r, y + r)
    end

    render.drawFilledCircle(x, y, r)
    render.disableScissorRect()
end

function lcars.button(index, x, y, w, h, r, idleColor, pressedColor, pressedSound, pressDelay)
    local meta = buttons.simpleRect(index, x, y, w, h)
    meta.__index = meta
    meta.__metatable = "LCARS Button"
    meta.__tostring = meta.__tostring
    meta.__concat = meta.__concat
    meta.metatable = meta

    ---- We override the draw call to draw what we want for LCARS buttons
    function meta:draw()
        local shape = self.shape
        local r, g, b, a = render.getColor()
        render.setColor(self.state.color)
        render.drawRoundedRect(shape.r, shape.x, shape.y, shape.w, shape.h)
        render.setColor(r, g, b, a)
    end

    function meta:onPress(x, y, player)
        self.state.color = self.state.pressedColor

        if self.state.pressedSound ~= nil then
            sounds.emitEntity(ents.self(), self.state.pressedSound)
        end

        timer.remove(tostring(self))
        timer.create(tostring(self), self.state.pressDelay, 1, function()
            self.state.color = self.state.idleColor
        end)
    end

    local button = setmetatable({}, meta)
    button.shape.r = r --We add radius, simpleRect doesnt ask for it
    button.state = {
        color = idleColor,
        idleColor = idleColor,
        pressDelay = pressDelay or 1,
        pressedColor = pressedColor,
        pressedSound = pressedSound
    }

    buttons.list[button.index] = button
    return button
end